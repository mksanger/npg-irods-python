#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2023 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Michael Kubiak <mk35@sanger.ac.uk>

import argparse
import logging
import structlog

from npg_irods.metadata.pacbio import backfill_id_products
from npg_irods.version import version

description = """
Recursively adds id_product metadata under the specified iRODS paths if 
required.
"""

parser = argparse.ArgumentParser(
    description=description, formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument(
    "paths",
    help="The paths in which to find objects that need id_product metadata added.",
    type=str,
)
parser.add_argument(
    "--out",
    "-o",
    help="The path to which the file for loading the mlwh locations table "
    "should be written. Defaults to the mlwh.json file in the pwd.",
    default="./mlwh.json",
)
parser.add_argument(
    "--colour",
    help="Use coloured log rendering to the console.",
    action="store_true",
)
parser.add_argument(
    "--json",
    help="Use JSON log rendering.",
    action="store_true",
)
parser.add_argument(
    "-c",
    "--clients",
    help="Number of baton clients to use. Defaults to 4.",
    type=int,
    default=4,
)
parser.add_argument(
    "-t",
    "--threads",
    help="Number of threads to use. Defaults to 4.",
    type=int,
    default=4,
)
parser.add_argument("--version", help="Print the version and exit", action="store_true")
parser.add_argument(
    "-d", "--debug", help="Enable DEBUG level logging to STDERR", action="store_true"
)
parser.add_argument(
    "-v", "--verbose", help="Enable INFO level logging to STDERR", action="store_true"
)

args = parser.parse_args()

level = logging.ERROR
if args.debug:
    level = logging.DEBUG
elif args.verbose:
    level = logging.INFO

logging.basicConfig(
    level=level,
    encoding="utf-8",
)

log_processors = [
    structlog.stdlib.add_logger_name,
    structlog.stdlib.add_log_level,
    structlog.processors.TimeStamper(fmt="iso", utc=True),
]
if args.json:
    log_processors.append(structlog.processors.JSONRenderer())
else:
    log_processors.append(structlog.dev.ConsoleRenderer(colors=args.colour))

structlog.configure(
    processors=log_processors,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

log = structlog.get_logger("main")


def main():
    if args.version:
        print(version())
        exit(0)

    backfill_id_products(
        args.paths, args.out, num_clients=args.clients, num_threads=args.threads
    )
